<?js

	var data = obj;
	var self = this;
	var rgxOpt = /<span class\=\"signature-attributes">opt<\/span>$/;

    function parseArgs (str) {
        var args = trimArgs(str);
        var prevOpt = false;
        for (var i = 0; i < args.length; i++) {
            var a = args[i];
            if (i) {
                a = ', '+a;
            }
            if (rgxOpt.test(a)) {
                a = a.replace(rgxOpt, '<i class="_color-gray25">]</i></span>');
                a = '<span class="_color-gray70"><i class="_color-gray25">[</i>'+a;
            }
            args[i] = a;
        }
        return ' ('+args.join('')+')';
    }

    function getSignature(data) {
        if (/^gulp4\s/.test(data.name)) {
            return '';
        }
        if (data.signature) {
            var str = data.signature;
            str = str.split(' &rarr; ');
            if (str[0]) {
                str[0] = parseArgs(str[0]);
            }
            if (str[1]) {
                str[1] = '<small class="_color-gray50" style="display: inline-block;vertical-align: initial;">&nbsp;&nbsp;&rarr; '+str[1]+'</small>';
            }
            return str.join('');
        }
        return '';
    }

    function insertAttribs (str) {
    	if (str && str !== '<span class="type-signature"></span>') {
            str = trimTags(str).split(', ');
            var arr = [];
            for (var i = 0; i < str.length; i++) {
                var t = str[i];
                switch(t) {
                    case 'private':
                        arr.push('<kbd>'+t+'</kbd>');
                        break;
                    case 'constant':
                        arr.push('<code>'+t+'</code>');
                        break;
                    default:
                        arr.push('<samp>'+t+'</samp>');
                }
            }
    		return arr.join('&nbsp');
    	}
    	return '';
    }

    function trimArgs (str) {
        str = str.replace(/^<((?!>).)+>/g, '');
        str = str.replace(/(^\(|\).+$)/g, '');
        return str.split(', ');
    }

    function trimTags(str) {
        str = str.replace(/\(|\)/g, '');
        str = str.replace(/ </g, '<');
        str = str.replace(/<((?!>).)+>/g, '');
        return str;
    }

    function insertName(objData, strKind, strName) {
        var isClass = strKind === 'class';
        strName = strName.replace(/(\(\))?[\s\|\t]*$/, '');
        strName = strName.replace(/\:\:/g, '.');
        strName = strName.replace(/^default/, '<em style="font-weight: normal;">default</em>');
        if (data.memberof && !/^module:/.test(data.longname)) {
             strName = '<span class="_color-gray50">'+data.memberof+'.</span>'+strName;
        }
        if (isClass) {
            strName = 'new '+strName;
        }
        return '<span class="_color-black">'+strName+'</span>';
    }
?>
<?js if (data.kind !== 'module') { ?>
    <?js if (data.kind === 'class' && data.classdesc) { ?>
    <h2>Constructor</h2>
    <?js } ?>

    <h4 class="name anchor-header" id="<?js= id ?>" data-text="<?js= this.htmlsafe(name) ?>">
        <a href="#<?js= id ?>" class="anchor-header__link">#</a>
        <?js= insertName(data, kind, name) + getSignature(data) ?>
    </h4>
    <p class="un-mar is-empty"><?js= insertAttribs(data.attribs) ?></p>

    <?js if (data.summary) { ?>
    <blockqoute class="summary">
        <?js= summary ?>
    </blockqoute>
    <?js } ?>
<?js } ?>

<?js if (data.augments && data.alias && data.alias.indexOf('module:') === 0) { ?>
    <h5>Extends:</h5>
    <?js= self.partial('augments.tmpl', data) ?>
<?js } ?>

<?js if (kind === 'event' && data.type && data.type.names) {?>
    <h5>Type:</h5>
    <ul>
        <li>
            <?js= self.partial('type.tmpl', data.type.names) ?>
        </li>
    </ul>
<?js } ?>

<?js if (data['this']) { ?>
    <h5>This:</h5>
    <ul><li><?js= this.linkto(data['this'], data['this']) ?></li></ul>
<?js } ?>

<?js if (data.params && params.length) { ?>
    <h5>Parameters:</h5>
    <?js= this.partial('params.tmpl', params) ?>
<?js } ?>

<?js if (data.kind !== 'module' && data.requires && data.requires.length) { ?>
<h5>Requires:</h5>
<ul><?js data.requires.forEach(function(r) { ?>
    <?js
        var reqLinkRegExp = /^\{@link\s(\[.+\])(\s|\t)*http/;
        r = r.replace(reqLinkRegExp, function(str, g1) {
            return g1 + '{@link http';
        });
        var r_link = self.linkto(r, r);
        if (r_link === r) {
            var r_val = r.replace(/^module:/, '');
            r_link = self.linkto(r_val, r_val);
        }
    ?>
    <li><?js= r_link ?></li>
    <?js }); ?></ul>
<?js } ?>
<?js if (data.kind !== 'module' && data.inludedIn && data.inludedIn.length) { ?>
    <h5>Used by:</h5>
    <ul><?js data.inludedIn.forEach(function(i) { ?>
        <li><?js= self.linkto(i, i) ?></li>
        <?js }); ?></ul>
<?js } ?>

<?js if (data.fires && fires.length) { ?>
<h5>Fires:</h5>
<ul><?js fires.forEach(function(f) { ?>
    <li><?js= self.linkto(f) ?></li>
<?js }); ?></ul>
<?js } ?>

<?js if (data.listens && listens.length) { ?>
<h5>Listens to Events:</h5>
<ul><?js listens.forEach(function(f) { ?>
    <li><?js= self.linkto(f) ?></li>
<?js }); ?></ul>
<?js } ?>

<?js if (data.listeners && listeners.length) { ?>
<h5>Listeners of This Event:</h5>
<ul><?js listeners.forEach(function(f) { ?>
    <li><?js= self.linkto(f) ?></li>
<?js }); ?></ul>
<?js } ?>

<?js if (data.exceptions && exceptions.length) { ?>
<h5>Throws:</h5>
<?js if (exceptions.length > 1) { ?><ul><?js
    exceptions.forEach(function(r) { ?>
        <li><?js= self.partial('exceptions.tmpl', r) ?></li>
    <?js });
?></ul><?js } else {
    exceptions.forEach(function(r) { ?>
        <?js= self.partial('exceptions.tmpl', r) ?>
    <?js });
} } ?>

<?js if (data.returns && returns.length) { ?>
<h6>Returns</h6>
<?js if (returns.length > 1) { ?><ul><?js
    returns.forEach(function(r) { ?>
        <li><?js= self.partial('returns.tmpl', r) ?></li>
    <?js });
?></ul><?js } else {
    returns.forEach(function(r) { ?>
        <?js= self.partial('returns.tmpl', r) ?>
    <?js });
} } ?>

<?js if (data.kind !== 'module' && data.description) { ?>
<h5><em>Description</em></h5>
<div class="description">
    <?js= data.description ?>
</div>
<?js } ?>

<?js if (data.examples && examples.length) { ?>
    <h5>Example<?js= examples.length > 1? 's':'' ?></h5>
    <?js= this.partial('examples.tmpl', examples) ?>
<?js } ?>


<?js= this.partial('details.tmpl', data) ?>

<br>
<hr>
<br>
